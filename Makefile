.PHONY: install dev dev-back dev-front build test clean setup help \
        db-up db-down db-migrate db-reset db-logs db-shell db-check \
        lint format type-check

# Installation compl√®te
install:
	@echo "üì¶ Installing backend dependencies..."
	cd backend && uv sync
	@echo "üì¶ Installing frontend dependencies..."
	cd frontend && npm install
	@echo "‚úÖ All dependencies installed"

# Setup complet avec base de donn√©es
setup: install db-up
	@echo "‚è≥ Waiting for database to be ready..."
	sleep 5
	$(MAKE) db-migrate
	@echo ""
	@echo "‚úÖ Development environment ready!"
	@echo ""
	@echo "üéØ Next steps:"
	@echo "  make dev       # Backend + Frontend (2 terminals recommended)"
	@echo "  make dev-back  # Backend only (port 8000)"
	@echo "  make dev-front # Frontend only (port 3000)"

# üóÑÔ∏è COMMANDES BASE DE DONN√âES
db-up:
	@echo "üóÑÔ∏è Starting PostgreSQL database..."
	cd backend && docker-compose up -d postgres
	@echo "‚è≥ Waiting for database to be ready..."
	@echo "   Database will be available on localhost:5433"
	@sleep 3
	@echo "‚úÖ Database started"

db-down:
	@echo "üõë Stopping database..."
	cd backend && docker-compose down
	@echo "‚úÖ Database stopped"

db-migrate:
	@echo "üîÑ Running database migrations..."
	cd backend && ./scripts/migrate.sh 2>/dev/null || echo "‚ö†Ô∏è Migration script not found, DB should be accessible"
	@echo "‚úÖ Migrations completed"

db-reset:
	@echo "üîÑ Resetting database (WARNING: This will delete all data!)"
	@read -p "Are you sure? (y/N): " -n 1 -r; \
	echo; \
	if [[ $$REPLY =~ ^[Yy]$$ ]]; then \
		cd backend && docker-compose down -v; \
		echo "üóÑÔ∏è Starting fresh database..."; \
		cd backend && docker-compose up -d postgres; \
		sleep 5; \
		$(MAKE) db-migrate; \
		echo "‚úÖ Database reset completed"; \
	else \
		echo "‚ùå Database reset cancelled"; \
	fi

db-logs:
	@echo "üìã Showing database logs..."
	cd backend && docker-compose logs -f postgres

db-shell:
	@echo "üîß Opening database shell..."
	@echo "Default connection: postgresql://postgres:password@localhost:5433/je_me_defends"
	cd backend && docker-compose exec postgres psql -U postgres -d je_me_defends

# V√©rification database (R√àGLE MANQUANTE AJOUT√âE)
db-check:
	@echo "üîç Checking database status..."
	@if ! cd backend && docker-compose ps postgres 2>/dev/null | grep -q "Up"; then \
		echo "‚ö†Ô∏è Database not running. Starting it..."; \
		$(MAKE) db-up; \
	else \
		echo "‚úÖ Database is running"; \
	fi

# üöÄ D√âVELOPPEMENT
dev: db-check
	@echo "üöÄ Development Environment Ready!"
	@echo "================================"
	@echo ""
	@echo "üóÑÔ∏è Database:  localhost:5433 (PostgreSQL)"
	@echo "üêç Backend:   http://localhost:8000"
	@echo "‚ö° Frontend:  http://localhost:3000"
	@echo "üìö API Docs:  http://localhost:8000/docs"
	@echo ""
	@echo "üí° RECOMMENDED: Use 2 separate terminals:"
	@echo "   Terminal 1: make dev-back"
	@echo "   Terminal 2: make dev-front"
	@echo ""
	@echo "Or launch both automatically:"
	$(MAKE) dev-auto

dev-auto: db-check
	@echo "üöÄ Starting both services automatically..."
	@bash -c ' \
		echo "Starting backend..."; \
		cd backend && uv run uvicorn app.main:app --reload --host 0.0.0.0 --port 8000 & \
		echo "Starting frontend..."; \
		cd frontend && npm run dev & \
		echo ""; \
		echo "‚úÖ Both services started!"; \
		echo "Press Ctrl+C to stop"; \
		wait'

dev-back: db-check
	@echo "üêç Starting backend with database..."
	@echo "  üóÑÔ∏è Database: localhost:5433"
	@echo "  üêç Backend:  http://localhost:8000"
	@echo "  üìö API Docs: http://localhost:8000/docs"
	@echo ""
	cd backend && uv run uvicorn app.main:app --reload --host 0.0.0.0 --port 8000

dev-front:
	@echo "‚ö° Starting frontend..."
	@echo "  ‚ö° Frontend: http://localhost:3000"
	@echo ""
	cd frontend && npm run dev

# Build production
build:
	@echo "üèóÔ∏è Building frontend for production..."
	cd frontend && npm run build
	@echo "‚úÖ Build completed"

# Tests
test: db-check
	@echo "üß™ Running tests..."
	cd backend && uv run pytest tests/ -v 2>/dev/null || echo "‚ö†Ô∏è No backend tests found"
	cd frontend && npm run type-check 2>/dev/null || echo "‚ö†Ô∏è Frontend type-check skipped"
	@echo "‚úÖ Tests completed"

# Linting & formatting
lint:
	@echo "üîç Linting code..."
	cd backend && uv run ruff check app/ 2>/dev/null || echo "‚ö†Ô∏è Ruff not configured"
	cd backend && uv run mypy app/ --strict 2>/dev/null || echo "‚ö†Ô∏è MyPy not configured"
	cd frontend && npm run lint:check 2>/dev/null || echo "‚ö†Ô∏è Frontend linting skipped"
	@echo "‚úÖ Linting completed"

format:
	@echo "üé® Formatting code..."
	cd backend && uv run ruff format app/ 2>/dev/null || echo "‚ö†Ô∏è Ruff not available"
	cd frontend && npm run format 2>/dev/null || echo "‚ö†Ô∏è Prettier not configured"
	@echo "‚úÖ Code formatted"

type-check:
	@echo "üîç Type checking frontend..."
	cd frontend && npm run type-check
	@echo "‚úÖ Type check completed"

# Nettoyage
clean:
	@echo "üßπ Cleaning up..."
	cd backend && find . -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true
	cd frontend && rm -rf .next node_modules/.cache 2>/dev/null || true
	@echo "‚úÖ Cleanup completed"

# Aide compl√®te
help:
	@echo "üìñ Je me d√©fends - Commandes disponibles:"
	@echo ""
	@echo "üöÄ Setup & D√©veloppement:"
	@echo "  make setup       # Installation compl√®te + base de donn√©es"
	@echo "  make dev         # Affiche les URLs et options de lancement"
	@echo "  make dev-auto    # Lance backend + frontend automatiquement"
	@echo "  make dev-back    # Backend seul (avec DB)"
	@echo "  make dev-front   # Frontend seul"
	@echo ""
	@echo "üóÑÔ∏è Base de donn√©es:"
	@echo "  make db-up       # D√©marrer PostgreSQL (port 5433)"
	@echo "  make db-down     # Arr√™ter PostgreSQL"
	@echo "  make db-migrate  # Ex√©cuter les migrations"
	@echo "  make db-reset    # Reset complet (ATTENTION: supprime les donn√©es)"
	@echo "  make db-logs     # Voir les logs de la DB"
	@echo "  make db-shell    # Ouvrir psql"
	@echo "  make db-check    # V√©rifier le statut de la DB"
	@echo ""
	@echo "üèóÔ∏è Build & Tests:"
	@echo "  make build       # Build production du frontend"
	@echo "  make test        # Tests backend + type-check frontend"
	@echo "  make lint        # V√©rification du code"
	@echo "  make format      # Formatage automatique"
	@echo "  make clean       # Nettoyage"
	@echo ""
	@echo "üåê URLs de d√©veloppement:"
	@echo "  Frontend:    http://localhost:3000"
	@echo "  Backend:     http://localhost:8000"
	@echo "  API Docs:    http://localhost:8000/docs"
	@echo "  PostgreSQL:  localhost:5433 (postgres/password)"
	@echo ""
	@echo "üí° Workflow recommand√©:"
	@echo "  1. make setup      # Une seule fois"
	@echo "  2. make dev-back   # Terminal 1"
	@echo "  3. make dev-front  # Terminal 2"
	@echo "  4. make test       # Avant commit"