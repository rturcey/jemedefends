# Code generated by sqlc. DO NOT EDIT.
# versions:
#   sqlc v1.22.0
# source: form_draft.sql
from typing import Any, Optional
import uuid

import sqlalchemy
import sqlalchemy.ext.asyncio

from app.db.generated import models


ADD_DRAFT_EVENT = """-- name: add_draft_event \\:exec
INSERT INTO form_draft_event (
    draft_id,
    event_type,
    meta
)
VALUES (
    :p1\\:\\:uuid,
    :p2\\:\\:form_draft_event_type,
    :p3\\:\\:jsonb
)
"""


CREATE_DRAFT = """-- name: create_draft \\:one
INSERT INTO form_draft (
    form_slug,
    data
)
VALUES (
    :p1\\:\\:text,
    :p2\\:\\:jsonb
)
RETURNING
    id,
    form_slug,
    data,
    status,
    created_at,
    updated_at,
    last_event
"""


GET_DRAFT = """-- name: get_draft \\:one
SELECT
    id,
    form_slug,
    data,
    status,
    created_at,
    updated_at,
    last_event
FROM form_draft
WHERE id = :p1\\:\\:uuid
LIMIT 1
"""


MARK_DRAFT_SUBMITTED = """-- name: mark_draft_submitted \\:exec
UPDATE form_draft
SET
    status = 'submitted',
    updated_at = now()
WHERE id = :p1\\:\\:uuid
"""


UPDATE_DRAFT_DATA = """-- name: update_draft_data \\:exec
UPDATE form_draft
SET
    data = :p1\\:\\:jsonb,
    last_event = :p2\\:\\:text,
    updated_at = now()
WHERE id = :p3\\:\\:uuid
"""


class AsyncQuerier:
    def __init__(self, conn: sqlalchemy.ext.asyncio.AsyncConnection):
        self._conn = conn

    async def add_draft_event(self, *, draft_id: uuid.UUID, event_type: Any, meta: Any) -> None:
        await self._conn.execute(sqlalchemy.text(ADD_DRAFT_EVENT), {"p1": draft_id, "p2": event_type, "p3": meta})

    async def create_draft(self, *, form_slug: str, data: Any) -> Optional[models.FormDraft]:
        row = (await self._conn.execute(sqlalchemy.text(CREATE_DRAFT), {"p1": form_slug, "p2": data})).first()
        if row is None:
            return None
        return models.FormDraft(
            id=row[0],
            form_slug=row[1],
            data=row[2],
            status=row[3],
            created_at=row[4],
            updated_at=row[5],
            last_event=row[6],
        )

    async def get_draft(self, *, id: uuid.UUID) -> Optional[models.FormDraft]:
        row = (await self._conn.execute(sqlalchemy.text(GET_DRAFT), {"p1": id})).first()
        if row is None:
            return None
        return models.FormDraft(
            id=row[0],
            form_slug=row[1],
            data=row[2],
            status=row[3],
            created_at=row[4],
            updated_at=row[5],
            last_event=row[6],
        )

    async def mark_draft_submitted(self, *, id: uuid.UUID) -> None:
        await self._conn.execute(sqlalchemy.text(MARK_DRAFT_SUBMITTED), {"p1": id})

    async def update_draft_data(self, *, data: Any, last_event: Optional[str], id: uuid.UUID) -> None:
        await self._conn.execute(sqlalchemy.text(UPDATE_DRAFT_DATA), {"p1": data, "p2": last_event, "p3": id})
