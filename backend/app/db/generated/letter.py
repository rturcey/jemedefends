# Code generated by sqlc. DO NOT EDIT.
# versions:
#   sqlc v1.22.0
# source: letter.sql
import dataclasses
import datetime
import decimal
from typing import AsyncIterator, Optional
import uuid

import sqlalchemy
import sqlalchemy.ext.asyncio

from app.db.generated import models


CREATE_LETTER = """-- name: create_letter \\:one
INSERT INTO letter (
    buyer_name,
    buyer_email,
    buyer_phone,
    buyer_address_line_1,
    buyer_address_line_2,
    buyer_postal_code,
    buyer_city,
    buyer_country,
    seller_name,
    seller_address_line_1,
    seller_address_line_2,
    seller_postal_code,
    seller_city,
    seller_country,
    purchase_date,
    product_name,
    order_reference,
    product_price,
    defect_description,
    remedy_preference,
    used,
    digital
) VALUES (
             :p1\\:\\:text,
             :p2\\:\\:text,
             :p3\\:\\:text,
             :p4\\:\\:text,
             :p5\\:\\:text,
             :p6\\:\\:text,
             :p7\\:\\:text,
             :p8\\:\\:text,
             :p9\\:\\:text,
             :p10\\:\\:text,
             :p11\\:\\:text,
             :p12\\:\\:text,
             :p13\\:\\:text,
             :p14\\:\\:text,
             :p15\\:\\:date,
             :p16\\:\\:text,
             :p17\\:\\:text,
             :p18\\:\\:numeric,
             :p19\\:\\:text,
             :p20\\:\\:remedy_preference_enum,
             :p21\\:\\:boolean,
             :p22\\:\\:boolean
         )
RETURNING id, buyer_name, buyer_email, buyer_phone, buyer_address_line_1, buyer_address_line_2, buyer_postal_code, buyer_city, buyer_country, seller_name, seller_email, seller_address_line_1, seller_address_line_2, seller_postal_code, seller_city, seller_country, purchase_date, product_name, product_price, order_reference, used, digital, defect_description, remedy_preference, content, status, created_at, updated_at
"""


@dataclasses.dataclass()
class CreateLetterParams:
    buyer_name: str
    buyer_email: Optional[str]
    buyer_phone: Optional[str]
    buyer_address_line_1: str
    buyer_address_line_2: Optional[str]
    buyer_postal_code: str
    buyer_city: str
    buyer_country: str
    seller_name: str
    seller_address_line_1: str
    seller_address_line_2: Optional[str]
    seller_postal_code: str
    seller_city: str
    seller_country: str
    purchase_date: datetime.date
    product_name: str
    order_reference: Optional[str]
    product_price: decimal.Decimal
    defect_description: str
    remedy_preference: models.RemedyPreferenceEnum
    used: bool
    digital: bool


DELETE_LETTER = """-- name: delete_letter \\:exec
DELETE FROM letter
WHERE id = :p1\\:\\:uuid
"""


GET_LETTER_BY_ID = """-- name: get_letter_by_id \\:one
SELECT id, buyer_name, buyer_email, buyer_phone, buyer_address_line_1, buyer_address_line_2, buyer_postal_code, buyer_city, buyer_country, seller_name, seller_email, seller_address_line_1, seller_address_line_2, seller_postal_code, seller_city, seller_country, purchase_date, product_name, product_price, order_reference, used, digital, defect_description, remedy_preference, content, status, created_at, updated_at
FROM letter
WHERE id = :p1\\:\\:uuid
LIMIT 1
"""


LIST_LETTERS = """-- name: list_letters \\:many
SELECT id, buyer_name, buyer_email, buyer_phone, buyer_address_line_1, buyer_address_line_2, buyer_postal_code, buyer_city, buyer_country, seller_name, seller_email, seller_address_line_1, seller_address_line_2, seller_postal_code, seller_city, seller_country, purchase_date, product_name, product_price, order_reference, used, digital, defect_description, remedy_preference, content, status, created_at, updated_at
FROM letter
ORDER BY created_at DESC
LIMIT :p2\\:\\:int OFFSET :p1\\:\\:int
"""


UPDATE_CONTENT = """-- name: update_content \\:one
UPDATE letter
SET
    content = :p1\\:\\:text,
    status = :p2\\:\\:letter_status_enum,
    updated_at = now()
WHERE id = :p3\\:\\:uuid
RETURNING id, buyer_name, buyer_email, buyer_phone, buyer_address_line_1, buyer_address_line_2, buyer_postal_code, buyer_city, buyer_country, seller_name, seller_email, seller_address_line_1, seller_address_line_2, seller_postal_code, seller_city, seller_country, purchase_date, product_name, product_price, order_reference, used, digital, defect_description, remedy_preference, content, status, created_at, updated_at
"""


UPDATE_LETTER_STATUS = """-- name: update_letter_status \\:one
UPDATE letter
SET
    status = :p1\\:\\:letter_status_enum,
    updated_at = now()
WHERE id = :p2\\:\\:uuid
RETURNING id, buyer_name, buyer_email, buyer_phone, buyer_address_line_1, buyer_address_line_2, buyer_postal_code, buyer_city, buyer_country, seller_name, seller_email, seller_address_line_1, seller_address_line_2, seller_postal_code, seller_city, seller_country, purchase_date, product_name, product_price, order_reference, used, digital, defect_description, remedy_preference, content, status, created_at, updated_at
"""


class AsyncQuerier:
    def __init__(self, conn: sqlalchemy.ext.asyncio.AsyncConnection):
        self._conn = conn

    async def create_letter(self, arg: CreateLetterParams) -> Optional[models.Letter]:
        row = (await self._conn.execute(sqlalchemy.text(CREATE_LETTER), {
            "p1": arg.buyer_name,
            "p2": arg.buyer_email,
            "p3": arg.buyer_phone,
            "p4": arg.buyer_address_line_1,
            "p5": arg.buyer_address_line_2,
            "p6": arg.buyer_postal_code,
            "p7": arg.buyer_city,
            "p8": arg.buyer_country,
            "p9": arg.seller_name,
            "p10": arg.seller_address_line_1,
            "p11": arg.seller_address_line_2,
            "p12": arg.seller_postal_code,
            "p13": arg.seller_city,
            "p14": arg.seller_country,
            "p15": arg.purchase_date,
            "p16": arg.product_name,
            "p17": arg.order_reference,
            "p18": arg.product_price,
            "p19": arg.defect_description,
            "p20": arg.remedy_preference,
            "p21": arg.used,
            "p22": arg.digital,
        })).first()
        if row is None:
            return None
        return models.Letter(
            id=row[0],
            buyer_name=row[1],
            buyer_email=row[2],
            buyer_phone=row[3],
            buyer_address_line_1=row[4],
            buyer_address_line_2=row[5],
            buyer_postal_code=row[6],
            buyer_city=row[7],
            buyer_country=row[8],
            seller_name=row[9],
            seller_email=row[10],
            seller_address_line_1=row[11],
            seller_address_line_2=row[12],
            seller_postal_code=row[13],
            seller_city=row[14],
            seller_country=row[15],
            purchase_date=row[16],
            product_name=row[17],
            product_price=row[18],
            order_reference=row[19],
            used=row[20],
            digital=row[21],
            defect_description=row[22],
            remedy_preference=row[23],
            content=row[24],
            status=row[25],
            created_at=row[26],
            updated_at=row[27],
        )

    async def delete_letter(self, *, id: uuid.UUID) -> None:
        await self._conn.execute(sqlalchemy.text(DELETE_LETTER), {"p1": id})

    async def get_letter_by_id(self, *, id: uuid.UUID) -> Optional[models.Letter]:
        row = (await self._conn.execute(sqlalchemy.text(GET_LETTER_BY_ID), {"p1": id})).first()
        if row is None:
            return None
        return models.Letter(
            id=row[0],
            buyer_name=row[1],
            buyer_email=row[2],
            buyer_phone=row[3],
            buyer_address_line_1=row[4],
            buyer_address_line_2=row[5],
            buyer_postal_code=row[6],
            buyer_city=row[7],
            buyer_country=row[8],
            seller_name=row[9],
            seller_email=row[10],
            seller_address_line_1=row[11],
            seller_address_line_2=row[12],
            seller_postal_code=row[13],
            seller_city=row[14],
            seller_country=row[15],
            purchase_date=row[16],
            product_name=row[17],
            product_price=row[18],
            order_reference=row[19],
            used=row[20],
            digital=row[21],
            defect_description=row[22],
            remedy_preference=row[23],
            content=row[24],
            status=row[25],
            created_at=row[26],
            updated_at=row[27],
        )

    async def list_letters(self, *, page_offset: int, page_size: int) -> AsyncIterator[models.Letter]:
        result = await self._conn.stream(sqlalchemy.text(LIST_LETTERS), {"p1": page_offset, "p2": page_size})
        async for row in result:
            yield models.Letter(
                id=row[0],
                buyer_name=row[1],
                buyer_email=row[2],
                buyer_phone=row[3],
                buyer_address_line_1=row[4],
                buyer_address_line_2=row[5],
                buyer_postal_code=row[6],
                buyer_city=row[7],
                buyer_country=row[8],
                seller_name=row[9],
                seller_email=row[10],
                seller_address_line_1=row[11],
                seller_address_line_2=row[12],
                seller_postal_code=row[13],
                seller_city=row[14],
                seller_country=row[15],
                purchase_date=row[16],
                product_name=row[17],
                product_price=row[18],
                order_reference=row[19],
                used=row[20],
                digital=row[21],
                defect_description=row[22],
                remedy_preference=row[23],
                content=row[24],
                status=row[25],
                created_at=row[26],
                updated_at=row[27],
            )

    async def update_content(self, *, content: Optional[str], status: models.LetterStatusEnum, id: uuid.UUID) -> Optional[models.Letter]:
        row = (await self._conn.execute(sqlalchemy.text(UPDATE_CONTENT), {"p1": content, "p2": status, "p3": id})).first()
        if row is None:
            return None
        return models.Letter(
            id=row[0],
            buyer_name=row[1],
            buyer_email=row[2],
            buyer_phone=row[3],
            buyer_address_line_1=row[4],
            buyer_address_line_2=row[5],
            buyer_postal_code=row[6],
            buyer_city=row[7],
            buyer_country=row[8],
            seller_name=row[9],
            seller_email=row[10],
            seller_address_line_1=row[11],
            seller_address_line_2=row[12],
            seller_postal_code=row[13],
            seller_city=row[14],
            seller_country=row[15],
            purchase_date=row[16],
            product_name=row[17],
            product_price=row[18],
            order_reference=row[19],
            used=row[20],
            digital=row[21],
            defect_description=row[22],
            remedy_preference=row[23],
            content=row[24],
            status=row[25],
            created_at=row[26],
            updated_at=row[27],
        )

    async def update_letter_status(self, *, status: models.LetterStatusEnum, id: uuid.UUID) -> Optional[models.Letter]:
        row = (await self._conn.execute(sqlalchemy.text(UPDATE_LETTER_STATUS), {"p1": status, "p2": id})).first()
        if row is None:
            return None
        return models.Letter(
            id=row[0],
            buyer_name=row[1],
            buyer_email=row[2],
            buyer_phone=row[3],
            buyer_address_line_1=row[4],
            buyer_address_line_2=row[5],
            buyer_postal_code=row[6],
            buyer_city=row[7],
            buyer_country=row[8],
            seller_name=row[9],
            seller_email=row[10],
            seller_address_line_1=row[11],
            seller_address_line_2=row[12],
            seller_postal_code=row[13],
            seller_city=row[14],
            seller_country=row[15],
            purchase_date=row[16],
            product_name=row[17],
            product_price=row[18],
            order_reference=row[19],
            used=row[20],
            digital=row[21],
            defect_description=row[22],
            remedy_preference=row[23],
            content=row[24],
            status=row[25],
            created_at=row[26],
            updated_at=row[27],
        )
